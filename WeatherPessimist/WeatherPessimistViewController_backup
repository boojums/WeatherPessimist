//
//  WeatherPessimistViewController.m
//  WeatherPessimist
//
//  Created by Cristina Luis on 8/17/12.
//  Copyright (c) 2012 Cristina Luis. All rights reserved.
//

#define kBgQueue dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0) //macro for background queue
//#define kJSONStringURL @"/Users/csluis/Code/iOS/WeatherPessimist/weatherdata.json"
#define kJSONStringURL @"http://free.worldweatheronline.com/feed/weather.ashx?q=85711&format=json&num_of_days=2&key=be45236e98154106120808"

#define kJSONStringURLBeginning @"http://free.worldweatheronline.com/feed/weather.ashx?q="
#define kJSONStringURLEnd @"&format=json&num_of_days=2&key=be45236e98154106120808"

#define kNoClimateZone 0;
#define kHotDesert 1;
#define kSoutheast 2;
#define kRedSoxNation 3;
#define kFlyoverStates 4;
#define kMountainWest 5;
#define kPacificNW 6;
#define kMidAtlantic 7;

#import "WeatherData.h"
#import "WeatherPessimistViewController.h"

#pragma mark -
#pragma mark NSDictionary categories for JSON support
@interface NSDictionary(JSONCategories)

+(NSDictionary*)dictionaryWithContentsOfJSONURLString:(NSString*)urlAddress;

@end

@implementation NSDictionary(JSONCategories)

+(NSDictionary*)dictionaryWithContentsOfJSONURLString:(NSString*)urlAddress
{
    NSData* data = [NSData dataWithContentsOfURL:
                    [NSURL URLWithString:urlAddress]];
    if(data == nil) {
        NSLog(@"failed to load data with url");
        return nil;
    }
    __autoreleasing NSError* error = nil;
    id result = [NSJSONSerialization JSONObjectWithData:data
                                                options:kNilOptions error:&error];
    if (error != nil) return nil;
    return result;
}

@end

#pragma - 
#pragma WeatherPessimistViewController interface
@interface WeatherPessimistViewController ()

@end

@implementation WeatherPessimistViewController
@synthesize zipField;
@synthesize currentLabel;
@synthesize nextDayLabel;
@synthesize twoDayLabel;

//class for holding current weather data? can be stored as object?
//1. get current location
//2. set up json fetch by lat/lon
//3. determine ranges for different climate zones in lat/long

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    //first check to see when last update was - info is cached
    //check if connected to internet
    //if needed, use cached information first
    //if time to refresh, use location finder or default zip code
    
    //create background queue, fetch data in the background based on last zip code
    dispatch_async(kBgQueue, ^{
        NSDictionary *json = [NSDictionary dictionaryWithContentsOfJSONURLString:kJSONStringURL];        [self performSelectorOnMainThread:@selector(fetchedData:)                                                                                                                                  withObject:json waitUntilDone:YES]; //fetchedData must be on main thread b/c UI stuff
    });
}

//called once data has been retrieved from web - should be bg thread if large file to be parsed
- (void)fetchedData:(NSDictionary *)responseData {
    
    // TODO: check if returned data is NULL; alert and abort if so
    NSDictionary *data = [responseData objectForKey:@"data"];
    //Keys in data are: weather, request, cuirrent_condition
    
    //current_condition has an array of one, which is a dictionary
    NSDictionary *currentConditions = [[data objectForKey:@"current_condition"] objectAtIndex:0];
    
    //weather is an array of two, nextDayForecast and twoDayForecast
    NSDictionary *nextDayForecast = [[data objectForKey:@"weather"] objectAtIndex:0];
    NSDictionary *twoDayForecast = [[data objectForKey:@"weather"] objectAtIndex:1];
    NSNumber *zip = [[[data objectForKey:@"request"] objectAtIndex:0] objectForKey:@"query"];
    NSString *code = (NSString *)[currentConditions objectForKey:@"weatherCode"];
 
    //need proper construction/destruction of weatherData objects
    WeatherData *weatherData = [[WeatherData alloc] initWithData:data];
    NSLog(@"weatherData.tempF: %d", weatherData.tempF);
    
    int climateZone = [self calculateClimateZone:zip];
    
    //fetch description based on wxcode from json and climate zone
    NSString *plistPath = [[NSBundle mainBundle] pathForResource:@"wxcodes" ofType:@"plist"];
    //should check if plistPath is valid
    NSDictionary *wxCodes = [NSDictionary dictionaryWithContentsOfFile:plistPath];
    NSDictionary *codeDictionary = [wxCodes objectForKey:code];
    NSString *description = (NSString *)[[codeDictionary objectForKey:@"descriptions"] objectAtIndex:climateZone];
    //NSLog(@"description for %@ code at 1: %@", code, description);
    

    /*
     NSEnumerator *enumerator = [twoDayForecast keyEnumerator];
     id key;
     while ((key = [enumerator nextObject])) {
     NSLog(@"key: %@", key);
     NSLog(@"%@", [twoDayForecast objectForKey:key]);
     }
     */
    
    int tempF = [[currentConditions objectForKey:@"temp_F"] intValue];
    
    //map condition codes to my own set of randomly-selected pessimistic conditions :-)
    //store these values (or the dictionary?) to save state/cache
    NSNumber *wind_mph = [currentConditions objectForKey:@"windspeedMiles"];
    currentLabel.numberOfLines = 0;
    //currentLabel.text = [NSString stringWithFormat:@"temperature: %d\n windspeed: %@ \n conditions: %@",tempF, wind_mph, description];
    currentLabel.text = [NSString stringWithFormat:@"temperature:%d\n windspeed: %@ \n conditions: %@", weatherData.tempF, weatherData.wind_mph, weatherData.description];
    
    NSNumber *tempMaxF = [nextDayForecast objectForKey:@"tempMaxF"];
    //nextDayLabel.text = [NSString stringWithFormat:@"Tomorrow will be %@째F", tempMaxF];
    nextDayLabel.text = [NSString stringWithFormat:@"Tomorrow will be %@째F", weatherData.nextTemp];
   
    tempMaxF = [twoDayForecast objectForKey:@"tempMaxF"];
    //twoDayLabel.text = [NSString stringWithFormat:@"The next day will be %@째F", tempMaxF];
    twoDayLabel.text = [NSString stringWithFormat:@"The next day will be %@째F", weatherData.twoDayTemp];

}

//returns climate zone for given zip code
//todo: a function for returning climate zones for a given lat/long
- (int)calculateClimateZone:(NSNumber *)zipCode {
    int zip = [zipCode intValue];
    NSLog(@"Zip code is: %d",zip);

    //some kind of NSNumber range comparison method?
    if (((zip >= 85000) && (zip < 88500)) || ((zip >= 88900) && (zip < 90000))){
        return kHotDesert;
    }
    else if (((zip >= 27000 ) && (zip < 40000)) || ((zip >= 70000) && (zip < 80000))) {
        return kSoutheast;
    }
    else if ((zip >= 01000) && (zip < 07000)) {
        return kRedSoxNation;
    }
    else if (((zip >= 80000) && (zip < 85000)) || ((zip >= 59000) && (zip < 60000))){
        return kMountainWest;
    }
    else if ((zip >= 40000) && (zip < 70000)) { // need to remove montana (59)
        return kFlyoverStates;
    }
    else if ((zip >= 97000) && (zip < 99500)) {
        return kPacificNW;
    }
    else if ((zip >= 07000) && (zip < 27000)) {
        return kMidAtlantic;
    }
    else if ((zip >= 90000) && (zip < 97000)) { // California and Hawaii
        return kHotDesert;
    }
    else if ((zip >= 99500) && (zip < 100000)) { //Alaska
        return kMidAtlantic;
    }

    NSLog(@"No climate zone defined for %i", zip);
    return kNoClimateZone;
}

- (IBAction)buttonPushed {
    [zipField resignFirstResponder]; //put keyboard away
    NSString *toScan = zipField.text;     //add support for city, state also?
    
    // strip zipField text down to just decimal digits
    NSScanner *s = [NSScanner scannerWithString:toScan];
    NSString *zipString;
    BOOL foo = [s scanCharactersFromSet:[NSCharacterSet decimalDigitCharacterSet] intoString:&zipString];
    
    // check for proper length
    if((!foo) || ([zipString length] != 5)) {
        UIAlertView *alert = [[UIAlertView alloc]
                              initWithTitle:@"Invalid zip code"
                              message:@"Try a real zip code."
                              delegate:nil
                              cancelButtonTitle:@"Ok"
                              otherButtonTitles:nil, nil];
        [alert show];
        return;
    }
    
    // check for positive value
    NSNumber *zipNum = [NSNumber numberWithInt:[zipString intValue]];
    if ([zipNum intValue] <= 0) {
        UIAlertView *alert = [[UIAlertView alloc]
                              initWithTitle:@"Invalid zip code"
                              message:@"Try a real zip code."
                              delegate:nil
                              cancelButtonTitle:@"Ok"
                              otherButtonTitles:nil, nil];
        [alert show];
        return;
    }
    
    //need to check defaults for last time updated and which zip was used
    NSUserDefaults *prefs = [NSUserDefaults standardUserDefaults];
    NSString *lastZipString = [prefs stringForKey:@"enteredZip"]; //get last zip code
    NSDate *then = (NSDate *)[prefs objectForKey:@"lastUpdate"]; //get last time
    
    //figure out how much time has elapsed
    NSTimeInterval elapsed;
    if (then) {
        elapsed = [then timeIntervalSinceNow];
    } else {
        elapsed = 0;
    }
    
    //make sure 15 minutes (900 seconds) has elapsed and it's not the same new zip code
    if ((elapsed > -900) && ([lastZipString isEqualToString:zipString])) {
        return; // no need to fetch new data
    }
    
    NSString *urlString = [NSString stringWithFormat:@"%@%@%@",kJSONStringURLBeginning, zipString, kJSONStringURLEnd];
    
    NSDictionary *result = [NSDictionary dictionaryWithContentsOfJSONURLString:urlString];
    [self fetchedData:result];
    
    //store currently fetched data
    [prefs setObject:[NSDate date] forKey:@"lastUpdate"];
    [prefs setObject:zipNum forKey:@"enteredZip"];
    [prefs synchronize];
}

- (BOOL)needToUpdate {
  //needs to be written
    return 1;
}

- (void)viewDidUnload {
    [self setZipField:nil];
    [self setCurrentLabel:nil];
    [self setNextDayLabel:nil];
    [self setTwoDayLabel:nil];
    [super viewDidUnload];
    // Release any retained subviews of the main view.
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);
}

-(IBAction)backgroundTouched:(id)sender {
    [zipField resignFirstResponder];
}

-(IBAction)textFieldReturn:(id)sender {
    [sender resignFirstResponder];
}

@end
